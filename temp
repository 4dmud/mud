commit afb3ff65844689f0e7ee488f515e0dadd949f799
Merge: eaeecbc... 05d780d...
Author: Rynald <nensonse@gmail.com>
Date:   Thu Jun 26 17:36:45 2014 -0300

    Merge branch 'master' of git@4dimensions.org:game-production

commit eaeecbc0d33f4c50201cfc7ea98c4dabf3567bed
Author: Rynald <nensonse@gmail.com>
Date:   Thu Jun 26 17:32:37 2014 -0300

    fixed buy <amount> <item>

diff --git a/shop.cpp b/shop.cpp
index 4a8054e..494d644 100755
--- a/shop.cpp
+++ b/shop.cpp
@@ -519,9 +519,13 @@ struct obj_data *get_purchase_obj(Character *ch, char *arg,
                                         Character *keeper, int shop_nr, int msg)
 {
   char name[MAX_INPUT_LENGTH];
+  char arg2[MAX_INPUT_LENGTH];
   struct obj_data *obj;
 
-  one_argument(arg, name);
+  two_arguments ( arg, name, arg2 );
+  if ( *arg2 )
+	strcpy ( name, arg2 );
+
   do
   {
     if (*name == '#' || is_number(name))

commit 05d780da128b9e1c8c7a0b07fd17d6b043c7612d
Author: Matthijs van Otterdijk <matko@pievolution.org>
Date:   Sun Jun 22 23:40:14 2014 +0200

    aggro and command triggers now play nice

diff --git a/act.informative.cpp b/act.informative.cpp
index 2dc6197..56255b6 100755
--- a/act.informative.cpp
+++ b/act.informative.cpp
@@ -1466,9 +1466,12 @@ void look_at_room ( Character *ch, int ignore_brief )
 	if ( ch->desc && ch->desc->mxp )
 		update_mxp_map ( ch );
 
-	if ( KILL_ALL_ENABLED && PRF_FLAGGED ( ch, PRF_AGGRO ) && view_room == IN_ROOM ( ch ) )
+	if ( KILL_ALL_ENABLED && PRF_FLAGGED ( ch, PRF_AGGRO ) && view_room == IN_ROOM ( ch ))
 	{
-		command_interpreter ( ch, ( char * ) "kill all" );
+	    // This needs to be in an array instead of being defined as a constant.
+	    // This is because command_interpreter might try to modify.
+	    char temp[] = "kill all";
+	    command_interpreter ( ch, temp );
 	}
 }
 

commit e0738117b2bcec4c73b20edc6a81442d4fdd01aa
Author: Matthijs van Otterdijk <matko@pievolution.org>
Date:   Sun Jun 22 23:27:11 2014 +0200

    aggro no longer triggers on scan

diff --git a/act.informative.cpp b/act.informative.cpp
index 0d10275..2dc6197 100755
--- a/act.informative.cpp
+++ b/act.informative.cpp
@@ -1466,7 +1466,7 @@ void look_at_room ( Character *ch, int ignore_brief )
 	if ( ch->desc && ch->desc->mxp )
 		update_mxp_map ( ch );
 
-	if ( KILL_ALL_ENABLED && PRF_FLAGGED ( ch, PRF_AGGRO ) )
+	if ( KILL_ALL_ENABLED && PRF_FLAGGED ( ch, PRF_AGGRO ) && view_room == IN_ROOM ( ch ) )
 	{
 		command_interpreter ( ch, ( char * ) "kill all" );
 	}

commit 5069d0461d02d85eb658b17d2bbc4b48570dabe1
Author: Matthijs van Otterdijk <matko@pievolution.org>
Date:   Sun Jun 22 21:39:24 2014 +0200

    Lisp: fixed 'find trigger'

diff --git a/lisp/build-tools.lisp b/lisp/build-tools.lisp
index 4df4f20..9ba8382 100644
--- a/lisp/build-tools.lisp
+++ b/lisp/build-tools.lisp
@@ -101,5 +101,6 @@
 		      (vnum (mobile-of reset))
 		      (name (mobile-of reset)))))))
     (trigger-not-found (e) (format t "No trigger with vnum ~d.~%" (vnum e)))
-    (error (e) (format t "usage: find trigger vnum~%~a~%" e))))
-		     
\ No newline at end of file
+    (error (e)
+      (mud-log "error in find-trigger: ~a~%" e)
+      (format t "usage: find trigger vnum~%~a~%" e))))
diff --git a/lisp/script.lisp b/lisp/script.lisp
index 1ead9eb..b695673 100644
--- a/lisp/script.lisp
+++ b/lisp/script.lisp
@@ -27,7 +27,7 @@
      do
        (cond ((= vnum (vnum trig))
 	      (return trig))
-	     ((= top bot)
+	     ((<= top bot)
 	      (error 'trigger-not-found :vnum vnum))
 	     ((< vnum (vnum trig))
 	      (setf top (1- rnum)))

commit 0efd51077245726f9f8cda15c5ef6ac553b2fbf8
Author: Matthijs van Otterdijk <matko@pievolution.org>
Date:   Sun Jun 22 21:39:04 2014 +0200

    lisp: added function mud-log

diff --git a/lisp/packages.lisp b/lisp/packages.lisp
index 01df9c0..5aafd63 100644
--- a/lisp/packages.lisp
+++ b/lisp/packages.lisp
@@ -1,8 +1,9 @@
+(defpackage :4d-internal
+  (:use :cl)
+  (:export mud-log))
+
 (defpackage :4d
   (:use :cl)
   (:shadow room)
   (:export game-loop-fn player-login player-logout))
 
-(defpackage :4d-internal
-  (:use :cl))
-
diff --git a/lisp/util.lisp b/lisp/util.lisp
index 61ccf18..69de15f 100644
--- a/lisp/util.lisp
+++ b/lisp/util.lisp
@@ -52,4 +52,7 @@
 		`(defmethod ,field (,'(,class ,class))
 		   (oneliner (,',accessor) (,',accessor-type) ,type
 			     ,(format nil ,c-accessor (or ref (string-downcase (symbol-name field))))))))
-     ,@body))
\ No newline at end of file
+     ,@body))
+
+(defun mud-log (&rest args)
+  (apply #'4d-internal:mud-log args))

commit 7eca5aaca09f4db42781a04105b04f2323c8075a
Author: Matthijs van Otterdijk <matko@pievolution.org>
Date:   Sun Jun 22 04:45:00 2014 +0200

    support for custom move messages

diff --git a/act.movement.cpp b/act.movement.cpp
index e791359..157dac8 100755
--- a/act.movement.cpp
+++ b/act.movement.cpp
@@ -197,6 +197,31 @@ int move_cost ( Character *ch, int dir )
 	return need_movement;
 }
 
+void create_custom_move_message (char* buf, int buf_size, const char* templ, const char* direction){
+    const char* s;
+    char tmp[3];
+    tmp[2]=0;
+    int i=0;
+    for (;;) {
+        if (*templ == '$') {
+            if (*(templ+1)=='d')
+		s = direction;
+	    else {
+		strncpy(tmp, templ, 2);
+		s=tmp;
+	    }
+	    
+	    templ+=2;
+	    strncpy(buf+i, s, buf_size-i);
+	    i+=strlen(s);
+	} else if (i >= buf_size || !(buf[i++] = *(templ++))) { //null-terminated
+	    break;
+	}
+    }
+
+    buf[buf_size-1]='\0'; //null-terminate for sure
+}
+
 /* do_simple_move assumes
  *    1. That there is no master and no followers.
  *    2. That the direction exists.
@@ -645,8 +670,10 @@ int do_simple_move ( Character *ch, int dir, int need_specials_check )
 		else
 			len = snprintf ( local_buf + len, sizeof ( local_buf ) - len, "." );
 
+		if ( GET_CUSTOM_LEAVE_MSG(ch) )
+		    create_custom_move_message(buf2, sizeof(buf2), GET_CUSTOM_LEAVE_MSG(ch), dirs[dir]);
 
-		if ( AFF_FLAGGED ( ( ch ), AFF_FLY ) )
+		else if ( AFF_FLAGGED ( ( ch ), AFF_FLY ) )
 			snprintf ( buf2, sizeof ( buf2 ), "$n flies %s%s", dirs[dir], local_buf );
 		else if ( IS_NPC ( ch ) && MOB_FLAGGED ( ch, MOB_SWIMS ) )
 			snprintf ( buf2, sizeof ( buf2 ), "$n swims %s%s", dirs[dir], local_buf );
@@ -930,6 +957,10 @@ int do_simple_move ( Character *ch, int dir, int need_specials_check )
 		{
 			if ( ch->hitched )
 				act ( "$n has arrived pulling $p.", TRUE, ch, ch->hitched, 0, TO_ROOM );
+			else if (GET_CUSTOM_ARRIVE_MSG(ch)) {
+			        create_custom_move_message(buf2, sizeof(buf2), GET_CUSTOM_ARRIVE_MSG(ch), dirs[rev_dir[dir]]);
+				act(buf2, TRUE, ch, 0, 0, TO_ROOM);
+			}
 			else
 				act ( "$n has arrived.", TRUE, ch, 0, 0, TO_ROOM );
 		}
diff --git a/character.cpp b/character.cpp
index f8e30e6..30bd0d4 100755
--- a/character.cpp
+++ b/character.cpp
@@ -1206,6 +1206,10 @@ void Character::free_char_strings()
 		free ( player.title );      /* PC / NPC's title                     */
 		player.title = NULL;
 	}
+	free(player.custom_leave);
+	free(player.custom_arrive);
+	player.custom_leave=NULL;
+	player.custom_arrive=NULL;
 }
 
 void Character::init_char_strings()
@@ -1215,6 +1219,8 @@ void Character::init_char_strings()
 	player.long_descr  = NULL;         /* for 'look'                           */
 	player.description  = NULL;        /* Extra descriptions                   */
 	player.title = NULL;         /* PC / NPC's title                     */
+	player.custom_arrive = NULL;
+	player.custom_leave = NULL;
 }
 bool Character::zone_empty()
 {
diff --git a/db.cpp b/db.cpp
index 336c4bd..1d9231e 100755
--- a/db.cpp
+++ b/db.cpp
@@ -2451,6 +2451,15 @@ void interpret_espec ( const char *keyword, const char *value, Character *mob, i
 		RANGE ( -1, ( int ) pi.TopIdNum );
 		mob->mob_specials.skin = num_arg;
 	}
+	CASE ( "Leave" )
+	{
+	    GET_CUSTOM_LEAVE_MSG(mob) = strdup(value);
+	}
+
+	CASE ( "Arrive" )
+	{
+	    GET_CUSTOM_ARRIVE_MSG(mob) = strdup(value);
+	}
 
 	if ( !matched )
 	{
diff --git a/genmob.cpp b/genmob.cpp
index fa6946d..d1d2515 100755
--- a/genmob.cpp
+++ b/genmob.cpp
@@ -253,6 +253,14 @@ int copy_mobile_strings ( Character *t, Character *f )
 		t->player.long_descr = strdup ( f->player.long_descr );
 	if ( f->player.description )
 		t->player.description = strdup ( f->player.description );
+	if ( f->player.custom_arrive )
+	        t->player.custom_arrive = strdup ( f->player.custom_arrive );
+	else
+	        t->player.custom_arrive = NULL;
+	if ( f->player.custom_leave )
+	        t->player.custom_leave = strdup ( f->player.custom_leave );
+	else
+	        t->player.custom_leave = NULL;
 
 
 	return TRUE;
@@ -270,6 +278,15 @@ int update_mobile_strings ( Character *t, Character *f )
 		t->player.long_descr = f->player.long_descr;
 	if ( f->player.description )
 		t->player.description = f->player.description;
+	if ( f->player.custom_arrive )
+	        t->player.custom_arrive = f->player.custom_arrive;
+	else
+	        t->player.custom_arrive = NULL;
+	if ( f->player.custom_leave )
+	        t->player.custom_leave = f->player.custom_leave;
+	else
+	        t->player.custom_leave = NULL;
+
 	return TRUE;
 }
 
@@ -444,6 +461,10 @@ int write_mobile_espec ( mob_vnum mvnum, Character *mob, FILE *fd )
 		fprintf ( fd, "Skin: %d\n", MOB_SKIN ( mob ) );
 	if ( MOB_OWNER ( mob ) != -1 )
 		fprintf ( fd, "Owner: %ld\n", MOB_OWNER ( mob ) );
+	if ( GET_CUSTOM_ARRIVE_MSG (mob))
+		fprintf ( fd, "Arrive: %s\n", GET_CUSTOM_ARRIVE_MSG ( mob ) );
+	if ( GET_CUSTOM_LEAVE_MSG (mob))
+		fprintf ( fd, "Leave: %s\n", GET_CUSTOM_LEAVE_MSG ( mob ) );
 	fputs ( "E\n", fd );
 	return TRUE;
 }
diff --git a/medit.cpp b/medit.cpp
index b7e92c0..8b50cc7 100755
--- a/medit.cpp
+++ b/medit.cpp
@@ -27,6 +27,7 @@
 #include "fight.h"
 #include "descriptor.h"
 
+
 /*-------------------------------------------------------------------*/
 
 /*
@@ -807,6 +808,8 @@ void medit_disp_menu ( Descriptor *d )
 	    "%sP%s) Mob Progs : %s%s\r\n"
 #endif
 	    "%sS%s) Script    : %s%-9s      %sY%s) Owner     : %s%s\r\n"
+	    "%sP%s) Arrive    : %s%s\r\n"
+	    "%sZ%s) Leave     : %s%s\r\n"
 	    "%sQ%s) Quit\r\n"
 	    "Enter choice : ",
 
@@ -827,6 +830,8 @@ void medit_disp_menu ( Descriptor *d )
 #endif
 	    grn, nrm, cyn, OLC_SCRIPT ( d ) ?"Set.":"Not Set.",
 	    grn, nrm, cyn, pi.NameById ( MOB_OWNER ( mob ) ),
+	    grn, nrm, cyn, GET_CUSTOM_ARRIVE_MSG ( mob ),
+	    grn, nrm, cyn, GET_CUSTOM_LEAVE_MSG ( mob ),
 	    grn, nrm
 	);
 
@@ -1089,6 +1094,16 @@ void medit_parse ( Descriptor *d, char *arg )
 					OLC_MODE ( d ) = MEDIT_OWNER;
 					medit_disp_mob_owner ( d );
 					return;
+				case 'p':
+				case 'P':
+					OLC_MODE ( d ) = MEDIT_ARRIVE;
+					i=-1;
+					break;
+				case 'z':
+				case 'Z':
+					OLC_MODE ( d ) = MEDIT_LEAVE;
+					i=-1;
+					break;
 				default:
 					medit_disp_menu ( d );
 					return;
@@ -1524,6 +1539,21 @@ void medit_parse ( Descriptor *d, char *arg )
 				}
 			}
 			break;
+	        case MEDIT_ARRIVE:
+		        free(GET_CUSTOM_ARRIVE_MSG(OLC_MOB(d)));
+			if (strlen(arg) == 0)
+			    GET_CUSTOM_ARRIVE_MSG(OLC_MOB(d)) = NULL;
+			else
+			    GET_CUSTOM_ARRIVE_MSG(OLC_MOB(d)) = delete_doubledollar(strdup(arg));
+			break;
+	        case MEDIT_LEAVE:
+		        free(GET_CUSTOM_LEAVE_MSG(OLC_MOB(d)));
+			if (strlen(arg) == 0)
+			    GET_CUSTOM_LEAVE_MSG(OLC_MOB(d)) = NULL;
+			else
+			    GET_CUSTOM_LEAVE_MSG(OLC_MOB(d)) = delete_doubledollar(strdup(arg));
+			break;
+		    
 			/*-------------------------------------------------------------------*/
 		default:
 			/*
diff --git a/oasis.h b/oasis.h
index 1cbe7b1..19e8015 100755
--- a/oasis.h
+++ b/oasis.h
@@ -372,6 +372,8 @@ extern const char *nrm, *grn, *cyn, *yel;
 #define MEDIT_NPC_FLAGS			5
 #define MEDIT_AFF_FLAGS			6
 #define MEDIT_CONFIRM_SAVESTRING	7
+#define MEDIT_ARRIVE                    8
+#define MEDIT_LEAVE                     9
 /*
  * Numerical responses.
  */
diff --git a/structs.h b/structs.h
index d004dc5..1d8cce1 100755
--- a/structs.h
+++ b/structs.h
@@ -1861,7 +1861,8 @@ struct char_player_data {
     long partner;        /* id of Romance Partner     (was char pointer, but meh, why bother with the freeing?)         */
     int ticks_left;      /* Timer variable                       */
     struct clan_deed_data deeds;
-
+    char *custom_leave;
+    char *custom_arrive;
 };
 
 
diff --git a/utils.h b/utils.h
index d914d4b..87bff1b 100755
--- a/utils.h
+++ b/utils.h
@@ -612,6 +612,10 @@ int has_body ( Character *ch, int flag );
 #define GET_LEVEL(ch)   ((ch)->player.level)
 #define GET_PASSWD(ch)	((ch)->player.passwd)
 
+#define GET_CUSTOM_LEAVE_MSG(ch) ((ch)->player.custom_leave)
+#define GET_CUSTOM_ARRIVE_MSG(ch) ((ch)->player.custom_arrive)
+
+
 /*
  * I wonder if this definition of GET_REAL_LEVEL should be the definition
  * of GET_LEVEL?  JE

commit 0c5a2f360c38099b9fcfd18168031b4e1f57fc17
Author: Rynald <nensonse@gmail.com>
Date:   Sun Jun 22 10:52:27 2014 -0300

    Fixed mobs assisting mobs

diff --git a/act.offensive.cpp b/act.offensive.cpp
index 442e10d..ec4e4ba 100755
--- a/act.offensive.cpp
+++ b/act.offensive.cpp
@@ -118,7 +118,7 @@ void perform_assist ( Character *ch, Character *helpee )
 		act ( "But nobody is fighting $M!", FALSE, ch, 0, helpee, TO_CHAR );
 	else if ( !CAN_SEE ( ch, opponent ) )
 		act ( "You can't see who is fighting $M!", FALSE, ch, 0, helpee, TO_CHAR );
-	else if ( !CONFIG_PK_ALLOWED && !IS_NPC ( opponent ) && !arena_ok ( ch, opponent ) )
+	else if ( !IS_NPC ( ch ) && !CONFIG_PK_ALLOWED && !IS_NPC ( opponent ) && !arena_ok ( ch, opponent ) )
 		/* prevent accidental pkill */
 		act ( "Use 'murder' if you really want to attack $N.", FALSE, ch, 0, opponent, TO_CHAR );
 	else

commit d75362430108c60f7b9ef62ca57da761eca5eedd
Merge: 2974c8f... ffe5bd2...
Author: Rynald <nensonse@gmail.com>
Date:   Sat Jun 14 14:49:44 2014 -0300

    Merge branch 'herd'

commit ffe5bd2a81ae04ab1c817dfcdb5c54facdf3f6ba
Author: Rynald <nensonse@gmail.com>
Date:   Sat Jun 14 14:48:35 2014 -0300

    Restored modifier of snare and made it not show in affects in a better way

diff --git a/act.informative.cpp b/act.informative.cpp
index d7555b8..0d10275 100755
--- a/act.informative.cpp
+++ b/act.informative.cpp
@@ -5614,14 +5614,14 @@ ACMD ( do_affects )
 				           ( minsec/60 ?   "min"   : "sec" ),
 				           CCCYN ( ch, C_NRM ), skill_name ( aff->type ), CCNRM ( ch, C_NRM ) );
 			}
-			if ( aff->modifier )
+			if ( aff->modifier && aff->location )
 			{
 				ch->Send ( " %+d to %s", aff->modifier,
 				           apply_types[ ( int ) aff->location] );
 			}
 			if ( aff->bitvector )
 			{
-				if ( aff->modifier )
+				if ( aff->modifier && aff->location )
 					ch->Send ( ", sets " );
 				else
 					ch->Send ( " sets " );
diff --git a/act.movement.cpp b/act.movement.cpp
index 7170577..e791359 100755
--- a/act.movement.cpp
+++ b/act.movement.cpp
@@ -2870,8 +2870,7 @@ ASKILL ( skill_snare )
 		// Changed this from 3 to 5. If this is too affecting
 		// it can be changed back. Prom
 		af.expire = HOURS_TO_EXPIRE ( 5 );
-		//af.modifier = GET_LEVEL(ch) + IS_NPC(ch) ? GET_LEVEL(ch) / 2: GET_SKILL(ch, SKILL_SNARE);
-		af.modifier = 0;
+		af.modifier = GET_LEVEL(ch) + IS_NPC(ch) ? GET_LEVEL(ch) / 2: GET_SKILL(ch, SKILL_SNARE);
 		af.location = APPLY_NONE;
 		af.bitvector = AFF_SNARE;
 
